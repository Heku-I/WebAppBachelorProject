@{
    ViewData["Title"] = "Home Page";

}

<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Home</title>
        <link rel="stylesheet" href="css/Home.css" />
    </head>
    
    
    <body>

        <span class="d-flex" id="skew-bg"> </span>
        <!--content-->
        <div class="content">
            <div class="text text-dark mt-5">
                <h1 class="display-3" style="font-weight: 900">
                    Welcome
                    <small class="mb-4 display-5" style="font-weight: 500">
                        to ImageAble
                        <br>
                        Generate a description of any image with AI.
                    </small>
                </h1>
            </div>




	
	
	        <!---------https://learn.microsoft.com/en-us/answers/questions/1016900/how-to-upload-multiple-pics-at-a-time-in-asp-net-c ---->
            <!-----THE NEW BUTTON (THIS IS FOR MULTIPLE IMAGES------>
            <form enctype="multipart/form-data" method="post">
                <dl>
                    <dt>

                        <div id="drop-area">

                            <dd>
                                <input type="file" id="file_input" name="uploadfile" accept="image/*" multiple>
                            </dd>
                        </div>
                    </dt>
                </dl>
            </form>



            <div id="selectModel" hidden>

            <!--Description-->
            <label for="descModel">Select a AI Description Model</label>

            <select name="descModel" id="descModel">
                <option value="ImageAble" selected> ImageAble </option>
                <option value="ChatGPT"> gpt-4-turbo (N/A) </option>

            </select>

            <!--Evaluation-->
            <label for="evalModel">Select a AI Evaluation Model</label>

            <select name="evalModel" id="evalModel">
                <option value="NCAM" selected> NCAM </option>
                <option value="N/A" disabled> N/A</option> 
            </select>

            </div>


            <div id="GenerateButtons"></div>

            <table id="previewTable" class="table"></table>
            <div id="informationOutput"></div>

        </div>
  

        <!--end of content-->

        <!-----WE SHOULD USE DESCRIPTIONS GENERATED BY OUR ML!!!!!----->

        <div class="container mt-5" id="exampleCards">
            <div class="row">

                <div class="col-md-2 mb-3 mt-5">
                    <div class="card">
                        <img src="./Images/istockphoto-1457639493-612x612.jpg" class="card-img-top" alt="One pink and two yellow icecream with sprinkles.1">
                        <div class="card-body">
                            <p class="card-text description">One pink and two yellow icecream with sprinkles.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-2 mb-4 mt-5">
                    <div class="card">
                        <img src="./Images/forest-1400475.webp" class="card-img-top" alt="Green forest with tall trees">
                        <div class="card-body">

                            <p class="card-text description">Green forest with tall trees.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-2 mb-2 mt-5">
                    <div class="card">
                        <img src="./Images/argynnis-adippe-2-1374489.webp" class="card-img-top" alt="Yellow butterfly with patterns">
                        <div class="card-body">
                            <p class="card-text description">Yellow butterfly with patterns.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-2 mb-2 mt-5">
                    <div class="card">
                        <img src="./Images/parrot.webp" class="card-img-top" alt="Colorful parrot with yellow and blue feathers">
                        <div class="card-body">

                            <p class="card-text description">Colorful parrot with yellow and blue feathers.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-2 mb-2 mt-5">
                    <div class="card">
                        <img src="./Images/butterfly.webp" class="card-img-top" alt="Small butterfly on orange flowers">
                        <div class="card-body">

                            <p class="card-text description">Small butterfly on orange flowers.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-2 mb-2 mt-5">
                    <div class="card">
                        <img src="./Images/jelly.webp" class="card-img-top" alt="Multiple orange jellyfish">
                        <div class="card-body">

                            <p class="card-text description">Multiple orange jellyfish.</p>
                        </div>
                    </div>
                </div>

            </div>
        </div>




        <!---------MODAL--------->
        <!---- https://getbootstrap.com/docs/5.0/components/modal/------->
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Change description</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <h6>Need to tweak the description? You can easily edit it below. </h6>


                            <textarea id="descriptionTextarea" rows="3" cols="50"></textarea>

                </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>



    @section scripts {
        <script>

            document.addEventListener("DOMContentLoaded", function () {
                var dropArea = document.getElementById("drop-area");
                var file_Input = document.getElementById("file_input"); //NEW
                var previewTable = document.getElementById("previewTable");
                var descriptionSelect = document.getElementById("descModel");
                var imageData = null;


                //NEW
                file_Input.addEventListener("change", function () {
                    previewImage();

                    document.getElementById("selectModel").hidden = false;
                });



                var ButtonManager = {
                    generateButtonContainer: null,

                    init: function () {
                        this.generateButtonContainer = document.getElementById("GenerateButtons");
                        this.generateButtonContainer.innerHTML = '';
                        this.generateButtonContainer.classList.add('d-flex', 'justify-content-center', 'mt-3');
                    },

                    //https://stackoverflow.com/questions/1085801/get-selected-value-in-dropdown-list-using-javascript

                    createGenerateButton: function () {
                        var sendButton = document.createElement('button');
                        sendButton.innerText = 'Generate Description';
                        sendButton.classList.add('btn', 'btn-lg', 'btn-success');
                        sendButton.addEventListener('click', function () {

                            if (descriptionSelect.value === "ImageAble") {
                                sendMultipleImageData('/Image/GetMultipleImages');
                            }

                            if (descriptionSelect.value === "ChatGPT") {

                                sendMultipleImageData('/Image/DescFromChatGPT');

                            }

                            
                        });

                        this.generateButtonContainer.appendChild(sendButton);
                    },

                    createUploadButton: function () {
                        var uploadButton = document.createElement('button');
                        uploadButton.innerText = 'Save All To Gallery';
                        uploadButton.classList.add('btn', 'btn-dark');
                        uploadButton.addEventListener('click', function () {
                            saveAllImagesToGallery();
                        });

                        this.generateButtonContainer.appendChild(uploadButton);
                    },

                };

                // Initialize the ButtonManager
                ButtonManager.init();





                /*
                ----------------------- PREVIEW IMAGE -----------------------
                Description:
                    Generates a dynamic preview of image files selected via `file_Input` in a specified table
                    (`previewTable`). First, it clears any existing content in the table and sets up headers
                    for 'Image', 'Description', 'Evaluation', and 'Button'. Each image file is read and displayed
                    in a new table row with placeholders for further descriptions and controls.

                    Sources:
                    https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow - For inserting table rows

                 */

                function previewImage() {
                    var files = file_Input.files; //NEW

                    // Clear existing previews
                    //preview.innerHTML = '';
                    previewTable.innerHTML = '';


                    let headers = previewTable.insertRow(0);

                    let imageHeaderCell = headers.insertCell(0);
                    imageHeaderCell.innerHTML = "Image";

                    let descriptionHeaderCell = headers.insertCell(1);
                    descriptionHeaderCell.innerHTML = "Description";

                    let evaluationHeaderCell = headers.insertCell(2);
                    evaluationHeaderCell.innerHTML = "Evaluation";

                    let buttonHeaderCell = headers.insertCell(3);
                    buttonHeaderCell.innerHTML = "Button";


                    //Looping through each selected file
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];

                        //Checking the file is an image
                        if (file.type.startsWith('image/')) {
                            var reader = new FileReader();

                            (function (index) {
                                reader.onload = function (e) {

                                    var img = document.createElement('img');
                                    img.src = e.target.result;
                                    img.classList.add('img-fluid', 'rounded');

                                    //Image size
                                    img.style.maxWidth = '25%';
                                    img.style.height = 'auto';


                                    let newRow = previewTable.insertRow(-1);
                                    newRow.insertCell(0).innerHTML = img.outerHTML;
                                    newRow.insertCell(1).innerHTML = "..."; //Placeholder for buttons (Not sure what to do here yet.) Maybe add something cool.
                                    newRow.insertCell(2).innerHTML = "..."; //Placeholder for buttons (Not sure what to do here yet.) Maybe add something cool.
                                    newRow.insertCell(3).innerHTML = "..."; //Placeholder for buttons (Not sure what to do here yet.) Maybe add something cool.
 

                                    if (index === files.length - 1) {

                                        document.getElementById("exampleCards").hidden = true;

                                        ButtonManager.createGenerateButton(); //This in another function to avoid duplicates...
                                    }
                                };
                            })(i);

                            // Read file as data URL
                            reader.readAsDataURL(file);
                        }
                    }
                }


                /*
                ----------------------- SEND MULTIPLE IMAGE DATA -----------------------
                     Description:
                        Sends an array of image files from a file input (`file_Input`) to a specified API endpoint.
                        Images are read as base64-encoded strings, collected into an array, and sent as JSON. The
                        function optionally includes authentication headers if required. After the API call, it
                        processes the response by updating the UI with descriptions, evaluations, and download
                        buttons, and handling errors appropriately.
                */

                function sendMultipleImageData(apiUrl, needsAuth = false, apiKey = null) {
                    var imageFiles = file_Input.files;

                    if (imageFiles && imageFiles.length > 0) {
                        var imageDataArray = [];

                        for (var i = 0; i < imageFiles.length; i++) {
                            var reader = new FileReader();
                            var file = imageFiles[i];

                            reader.onload = function (e) {
                                var base64String = e.target.result.split(',')[1];
                                imageDataArray.push(base64String);

                                if (imageDataArray.length === imageFiles.length) {
                                    var jsonData = { imageBase64Array: imageDataArray };

                                    var headers = {
                                        'Content-Type': 'application/json',
                                    };

                                    if (needsAuth && apiKey) {
                                        headers['Authorization'] = `Bearer ${apiKey}`;
                                    }

                                    fetch(apiUrl, {
                                        method: 'POST',
                                        headers: headers,
                                        body: JSON.stringify(jsonData),
                                    })
                                        .then(response => response.json())
                                        .then(data => {
                                            console.log('Success:', data);
                                            displayDescription(data.descriptions);
                                            generateEvaluation();
                                            displayDownloadButtons();
                                            displayUpdateDescriptionButtons(); 
                                            ButtonManager.createUploadButton();
                                        })
                                        .catch((error) => {
                                            console.error('Error:', error);
                                            document.getElementById('informationOutput').innerHTML = "Error: Failed to send image data. Please try another model.";
                                        });
                                }
                            };

                            reader.readAsDataURL(file);
                        }
                    } else {
                        console.error('No image data to send');
                        document.getElementById('informationOutput').innerHTML = "Please upload an image.";
                    }
                }




                /*
                ----------------------- DISPLAY DESCRIPTION -----------------------
                Description:
                    Updates an HTML table (`previewTable`) by populating it with descriptions provided in the
                    `description` array. The function iterates over the array, placing each description into
                    successive table rows, starting from the second row to skip the header. 

                    Source:
                    https://www.tutorialspoint.com/How-to-add-rows-to-a-table-using-JavaScript-DOM
                */

                function displayDescription(description) {
                    console.log("Description length:", description.length);
                    //console.log("Number of rows in the table:", previewTable.rows.length);
                    for (var i = 0; i < description.length; i++) {
                        var row = previewTable.rows[i + 1]; // To skip header row (+ 1)
                        if (row) {
                            // Updating the content of the cells in the row
                            row.cells[1].innerHTML = description[i];
                        } else {
                            console.error("Row not found:", i + 1);
                        }
                    }
                }



                /*
                 ----------------------- SAVE ALL IMAGES TO GALLERY/DATABASE/FOLDER -----------------------
                Description:
                    Gets image files, descriptions, and evaluations from a table (`previewTable`) and an input
                    (`file_Input`), constructs a FormData object, and sends it to a server endpoint via POST. Each
                    file and its corresponding metadata are logged before sending. 
                */

                function saveAllImagesToGallery() {
                    var rows = previewTable.rows;

                    //Checking if files are selected
                    if (file_Input.files.length > 0) {
                        var formToSend = new FormData();

                        //Looping through each file and corresponding table row
                        for (let i = 0; i < file_Input.files.length; i++) {
                            var imageFiles = file_Input.files[i];
                            var descriptions = rows[i + 1].cells[1].innerText; 
                            var evaluationContent = rows[i + 1].cells[2].innerText;
                            var evaluations = stripHtml(evaluationContent);

                            // Log each append to check data
                            console.log(`Appending File name: ${imageFiles.name}`);
                            console.log(`Appending File: ${imageFiles}`);
                            console.log(`Appending Description: ${descriptions}`);
                            console.log(`Appending Evaluation: ${evaluations}`);

                            // Append each file with the same key
                            formToSend.append('imageFiles', imageFiles);
                            formToSend.append('descriptions', descriptions);
                            formToSend.append('evaluations', evaluations);
                        }

                        fetch('/Image/SaveImage', {
                            method: 'POST',
                            body: formToSend

                        })
                            .then(response => response.text())
                            .then(text => {
                                console.log("Response:", text);
                                return JSON.parse(text);
                            })
                            .then(data => {
                                console.log('Success:', data);
                            })
                            .catch(error => {
                                console.error('Error:', error);
                            });
                    } else {
                        console.error('No files selected or mismatch between files and table rows.');
                    }
                }


                /*
                ----------------------- GENERATE EVALUATION -----------------------
                Description:
                    Collects descriptions from (`previewTable`) and sends them as a JSON payload to a server endpoint for processing. 
                    
                    On receiving the response, it checks the validity of the data and calls `displayEvaluation` to update the UI
                    with received data. This function also handles errors by logging them to the console.n
                */

                function generateEvaluation() {
                    let tableLength = previewTable.rows.length;
                    var description = [];

                    for (var i = 0; i < tableLength; i++) {
                        var row = previewTable.rows[i + 1];
                        if (row) {
                            description.push(row.cells[1].innerHTML);
                        }
                    }

                    console.log("Reached generate evaluation with: ", description);

                    if (description.length > 0) {
                        var jsonData = { description: description };

                        fetch('/Image/GetEval', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(jsonData),
                        })
                            .then(response => response.json())

                            .then(data => {
                                console.log('Received data:', data); // Log the entire data object (SHOULD BE REMOVED.)

                                if (data && data.length > 0) {
                                    displayEvaluation(data);

                                } else {
                                    console.log('Predictions data is null or empty');
                                }
                            })
                            .catch((error) => {
                                console.error('Error:', error);
                            });
                    } else {
                        console.error('No description data to send');
                    }
                }



                /*
                ----------------------- STRIP HTML -----------------------
                Description:
                    Removes all HTML tags from a given string. This function takes a string containing HTML
                    and returns a new string with all HTML tags stripped using a regular expression, leaving
                    only plain text.

                    Sources:
                    https://stackoverflow.com/questions/822452/strip-html-tags-from-text-using-plain-javascript

                */

                function stripHtml(html) {
                    return html.replace(/<[^>]*>/g, '');
                }





                /*
                ----------------------- DISPLAY EVALUATION -----------------------
                     Description:
                        Clears and updates a table with formatted evaluation metrics. Metrics are converted to numeric
                        values, formatted to four decimal places, and displayed in batches of 10 per cell. Errors are
                        logged if specified table rows do not exist.
                */

                function displayEvaluation(evaluation) {

                    // Clear existing content in the table
                    for (var i = 0; i < previewTable.rows.length; i++) {
                        var row = previewTable.rows[i+1];
                        if (row) {
                            // Clear the content of the cells in the row
                            row.cells[2].innerHTML = '';
                        }
                    }
                    var rowIndex = 1; 
                    var columnIndex = 2; 

                    var formattedResults = '';

                    for (var i = 0; i < evaluation.length; i++) {
                        var numericValue = parseFloat(evaluation[i]);

                        if (!isNaN(numericValue)) {
                            var formattedValue = numericValue.toFixed(4);

                            //Append the formatted value to the existing results
                            formattedResults += formattedValue + '<br>';

                            //Check if 10 metrics have been added or if it's the last metric
                            if ((i + 1) % 10 === 0 || i === evaluation.length - 1) {
                                var row = previewTable.rows[rowIndex];

                                //Checking if the row exists
                                if (row) {
                                    row.cells[columnIndex].innerHTML = formattedResults;

                                    formattedResults = '';

                                    rowIndex++;
                                } else {
                                    console.error("Row not found:", rowIndex);
                                }
                            }
                        }
                    }
                }



                /*

                ----------------------- DOWNLOAD IMAGE -----------------------
                     Description:
                        Downloading the image with the generated description and evaluation as metadata. 
                        We send the image with the data to the backend with a AJAX-request. 
                        We get the description and evaluation from the table-row.
                        We get the image from the file_input. 
                        We recieve the processed image from the backend and trigger the browser to download the file.

                        At this point the image has not been saved anywhere..
                */

                function downloadImage(rowIndex) {
                    console.log("reached downloadImage at row: " + rowIndex);

                    if (file_Input.files.length === 0) {
                        alert('Please select an image file.');
                        return;
                    }

                    // Directly access the correct row from the table.
                    var row = previewTable.rows[rowIndex]; 

                    var imageFile = file_Input.files[rowIndex - 1]; 
                    var description = row.cells[1].innerText;
                    var evaluationContent = row.cells[2].innerText;
                    var evaluation = stripHtml(evaluationContent);

                    const formData = new FormData();
                    formData.append('imageFile', imageFile);
                    formData.append('description', description);
                    formData.append('evaluation', evaluation);

                    fetch('Image/downloadImageWithMetadata', {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok: ' + response.statusText);
                            }
                            return response.blob();
                        })
                        .then(blob => {
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.download = imageFile.name;
                            document.body.appendChild(a);
                            a.click();
                            a.remove();
                        })
                        .catch(error => console.error('Error downloading the image:', error));
                }





                /*
                ----------------------- DISPLAY DOWNLOAD BUTTONS-----------------------
                    Description:
                        Adds a download button to each row in the 'previewTable'. 
                        Ensures every image row has a button linked to the downloadImage function.

                */

                function displayDownloadButtons() {

                    var rows = previewTable.rows;

                    // Start from 1 to skip the header row
                    for (var i = 1; i < rows.length; i++) {
                        var row = rows[i];
                        var downloadCell = row.cells[3];


                        downloadCell.innerHTML = '';
                        var button = createDownloadButtonHTML(i);  
                        downloadCell.appendChild(button);  
                    }
                }



                /*
                ----------------------- CREATE DOWNLOAD BUTTON HTML -----------------------
                    Description:
                        Returns HTML for a download button that triggers downloadImage with the row's index.
                        Used by displayDownloadButtons to add/create download buttons.
                */

                function createDownloadButtonHTML(index) {
                    const button = document.createElement('button');
                    button.textContent = 'Download';
                    button.className = 'download-btn'; 
                    button.onclick = function () { downloadImage(index); };
                    return button; 
                }


                /*
                ----------------------- DISPLAY UPDATE DESCRIPTION BUTTONS -----------------------
                    Description:
                        Iterates over each row in the preview table, starting from the second row to skip the header.
                        Calls createUpdateButtonHTML to generate a 'Change Description' button for each row and appends it to the fourth[3] cell.
                */
                function displayUpdateDescriptionButtons() {
                    const rows = previewTable.rows; 

                    for (let i = 1; i < rows.length; i++) {
                        const row = rows[i];
                        const updateCell = row.cells[3]; 

                        const button = createUpdateButtonHTML(i);
                        updateCell.appendChild(button);
                    }
                }


                /*
                ----------------------- CREATE UPDATE BUTTON HTML -----------------------
                    Description:
                        Creates and returns a 'Change Description' button. This button is configured to trigger a modal
                        when clicked, with the modal being populated by loadDescriptionIntoModal using the index of the row.

                        SOURCES: https://getbootstrap.com/docs/5.0/components/modal/

                */

                function createUpdateButtonHTML(row) {
                    const button = document.createElement('button');
                    button.textContent = 'Change Description';
                    button.className = 'update-btn';
                    button.setAttribute('data-bs-toggle', 'modal');
                    button.setAttribute('data-bs-target', '#exampleModal');
                    button.onclick = function () {
                        loadDescriptionIntoModal(row);
                    };
                    return button;
                }


                /*
                ----------------------- LOAD DESCRIPTION INTO MODAL -----------------------
                    Description:
                        Loads the current description from the selected row into the textarea within the modal.
                        Also sets up the 'Save changes' button to update the description of the selected row when clicked.
                */

                function loadDescriptionIntoModal(row) {

                    const rows = previewTable.rows;
                    const description = rows[row].cells[1].innerText; 
                    document.getElementById('descriptionTextarea').value = description;

                    const saveButton = document.querySelector('.modal-footer .btn-primary');
                    saveButton.onclick = function () {
                        saveDescription(row);
                    };
                }

                /*
                ----------------------- SAVE DESCRIPTION (MODAL) -----------------------
                    Description:
                        Saves the edited description from the textarea back into the specified row of the preview table.
                        Closes the modal once the save is complete.
                */

                function saveDescription(row) {
                    const rows = previewTable.rows;

                    const newDescription = document.getElementById('descriptionTextarea').value;
                    rows[row].cells[1].innerText = newDescription;
                    $('#exampleModal').modal('hide'); 

                    //Not sure if I want to run the evaluation here again or not. 
                }






            });
        </script>
    }



</body>

</html>
