@{
    ViewData["Title"] = "Home Page";

}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="css/Home.css" />
</head>

<body>

    <span class="d-flex" id="skew-bg"> </span>
    <!--content-->
    <div class="content">
        <div class="text text-dark mt-5">
            <h1 class="display-3" style="font-weight: 900">
                Welcome
                <small class="mb-4 display-5" style="font-weight: 500">
                    to ImageAble
                    <br>
                    Generate a description of any image with AI.
                </small>
            </h1>
        </div>



        <!-----THE OLD BUTTON.
        <div class="container mt-5 w-50">
            <div id="drop-area" class="dark-container h2">
                <p>
                    Drag and drop
                    <br>
                    an image file here
                    <br>
                    or click to select one.
                </p>
                <input type="file" id="file-input" accept="image/*" style="display: none;" />
            </div>
            ------>
		
	
	
	<!---------https://learn.microsoft.com/en-us/answers/questions/1016900/how-to-upload-multiple-pics-at-a-time-in-asp-net-c ---->



    <!-----THE NEW BUTTON (THIS IS FOR MULTIPLE IMAGES------>
            <form enctype="multipart/form-data" method="post">
                <dl>
                    <dt>

                        <div id="drop-area">

                            <dd>
                                <input type="file" id="file_input" name="uploadfile" accept="image/*" multiple>
                            </dd>
                        </div>
                    </dt>
                </dl>
            </form>


            <!--NOT WORKING YET!-->
        <div id="selectModel" hidden>

            <!--Description-->
            <label for="descModel">Select a AI Description Model</label>

            <select name="descModel" id="descModel">
                <option value="ImageAble"> ImageAble </option>
                <option value="ChatGPT" disabled> ChatGPT 4 (N/A) </option> 
          
            </select>

            <!--Evaluation-->
            <label for="evalModel">Select a AI Evaluation Model</label>

            <select name="evalModel" id="evalModel">
                <option value="NCAM"> NCAM </option>
                <option value="N/A" disabled> N/A</option> 
            </select>

            </div>


        <div id="GenerateButtons"></div>

            <table id="previewTable" class="table"></table>



            <div id="UploadImage"></div> <!--This might need to get removed. Just for debugging atm.-->
            <div id="informationOutput"></div>


            <textarea id="Description" hidden></textarea>
            <div id="evaluationOutput" hidden> </div>

        </div>
    </div>

    <!--end of content-->

    <!-----WE SHOULD USE DESCRIPTIONS GENERATED BY OUR ML!!!!!----->

    <div class="container mt-5" id="exampleCards">
        <div class="row">

            <div class="col-md-2 mb-3 mt-5">
                <div class="card">
                    <img src="./Images/istockphoto-1457639493-612x612.jpg" class="card-img-top" alt="One pink and two yellow icecream with sprinkles.1">
                    <div class="card-body">
                        <p class="card-text description">One pink and two yellow icecream with sprinkles.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2 mb-4 mt-5">
                <div class="card">
                    <img src="./Images/forest-1400475.webp" class="card-img-top" alt="Green forest with tall trees">
                    <div class="card-body">

                        <p class="card-text description">Green forest with tall trees.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2 mb-2 mt-5">
                <div class="card">
                    <img src="./Images/argynnis-adippe-2-1374489.webp" class="card-img-top" alt="Yellow butterfly with patterns">
                    <div class="card-body">
                        <p class="card-text description">Yellow butterfly with patterns.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2 mb-2 mt-5">
                <div class="card">
                    <img src="./Images/parrot.webp" class="card-img-top" alt="Colorful parrot with yellow and blue feathers">
                    <div class="card-body">

                        <p class="card-text description">Colorful parrot with yellow and blue feathers.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2 mb-2 mt-5">
                <div class="card">
                    <img src="./Images/butterfly.webp" class="card-img-top" alt="Small butterfly on orange flowers">
                    <div class="card-body">

                        <p class="card-text description">Small butterfly on orange flowers.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2 mb-2 mt-5">
                <div class="card">
                    <img src="./Images/jelly.webp" class="card-img-top" alt="Multiple orange jellyfish">
                    <div class="card-body">

                        <p class="card-text description">Multiple orange jellyfish.</p>
                    </div>
                </div>
            </div>

        </div>
    </div>



    @section scripts {
        <script>



            document.addEventListener("DOMContentLoaded", function () {
                var dropArea = document.getElementById("drop-area");
                var file_Input = document.getElementById("file_input"); //NEW
                var previewTable = document.getElementById("previewTable");

                var imageData = null;



                //NEW
                file_Input.addEventListener("change", function () {
                    previewImage();

                    document.getElementById("selectModel").hidden = false;
                });




                //I think we need sources for this code:

                //I little inspired by GPT... Might need too make own code.

                //Not sure if we really need this, dont understand what it is. 

                /*
                dropArea.addEventListener("dragover", function (e) {
                    e.preventDefault();
                    dropArea.classList.add("border", "border-secondary");
                });

                dropArea.addEventListener("dragleave", function () {
                    dropArea.classList.remove("border", "border-secondary");
                });

                dropArea.addEventListener("drop", function (e) {
                    e.preventDefault();
                    dropArea.classList.remove("border", "border-secondary");

                    var files = e.dataTransfer.files;

                    if (files.length > 0) {
                        file_Input.files = files;
                        previewImage();
                    }
                });

                dropArea.addEventListener("click", function () {
                    file_Input.click();
                });

                file_Input.addEventListener("click", function (e) {
                    e.stopPropagation();
                });
                */


                var ButtonManager = {
                    generateButtonContainer: null,

                    init: function () {
                        this.generateButtonContainer = document.getElementById("GenerateButtons");
                        this.generateButtonContainer.innerHTML = '';
                        this.generateButtonContainer.classList.add('d-flex', 'justify-content-center', 'mt-3');
                    },

                    createGenerateButton: function () {
                        var sendButton = document.createElement('button');
                        sendButton.innerText = 'Generate Description';
                        sendButton.classList.add('btn', 'btn-lg', 'btn-success');
                        sendButton.addEventListener('click', function () {
                            // sendImageData(); //OLD
                            sendMultipleImageData();
                        });

                        this.generateButtonContainer.appendChild(sendButton);
                    },

                    createUploadButton: function () {
                        var uploadButton = document.createElement('button');
                        uploadButton.innerText = 'Save All To Gallery';
                        uploadButton.classList.add('btn', 'btn-dark');
                        uploadButton.addEventListener('click', function () {
                            saveAllImagesToGallery();
                        });

                        this.generateButtonContainer.appendChild(uploadButton);
                    },

                    createDownloadButton: function () {
                        var uploadButton = document.createElement('button');
                        uploadButton.innerText = 'Download w/ metadata';
                        uploadButton.classList.add('btn', 'btn-dark');
                        uploadButton.addEventListener('click', function () {
                            downloadImage();
                        });

                        this.generateButtonContainer.appendChild(downloadImage);
                    }
                };

                // Initialize the ButtonManager
                ButtonManager.init();



                ///TO BE REMOVED:

                /*function createGenerateButton() {
                    var generateButtonContainer = document.getElementById("GenerateButtons");
                    generateButtonContainer.innerHTML = '';
                    generateButtonContainer.classList.add('d-flex', 'justify-content-center', 'mt-3');

                    var sendButton = document.createElement('button');
                    sendButton.innerText = 'Generate Description';
                    sendButton.classList.add('btn', 'btn-lg', 'btn-success');
                    sendButton.addEventListener('click', function () {
                        sendImageData();
                    });

                    generateButtonContainer.appendChild(sendButton);
                }

                function createUploadButton(generateButtonContainer) {
                    var uploadButton = document.createElement('button');
                    uploadButton.innerText = 'Save';
                    uploadButton.classList.add('btn', 'btn-dark');
                    uploadButton.addEventListener('click', function () {
                        saveImage();
                    });

                    generateButtonContainer.appendChild(uploadButton);
                }
                */

                //https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow //Inserting table  rows

                function previewImage() {
                    var files = file_Input.files; //NEW

                    // Clear existing previews
                    //preview.innerHTML = '';
                    previewTable.innerHTML = '';


                    let headers = previewTable.insertRow(0);

                    let imageHeaderCell = headers.insertCell(0);
                    imageHeaderCell.innerHTML = "Image";

                    let descriptionHeaderCell = headers.insertCell(1);
                    descriptionHeaderCell.innerHTML = "Description";

                    let evaluationHeaderCell = headers.insertCell(2);
                    evaluationHeaderCell.innerHTML = "Evaluation";

                    let buttonHeaderCell = headers.insertCell(3);
                    buttonHeaderCell.innerHTML = "Button";


                    //Looping through each selected file
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];

                        //Checking the file is an image
                        if (file.type.startsWith('image/')) {
                            var reader = new FileReader();

                            (function (index) {
                                reader.onload = function (e) {

                                    var img = document.createElement('img');
                                    img.src = e.target.result;
                                    img.classList.add('img-fluid', 'rounded');

                                    //Image size
                                    img.style.maxWidth = '25%';
                                    img.style.height = 'auto';


                                    let newRow = previewTable.insertRow(-1);
                                    newRow.insertCell(0).innerHTML = img.outerHTML;
                                    newRow.insertCell(1).innerHTML = "..."; //Placeholder for buttons (Not sure what to do here yet.)
                                    newRow.insertCell(2).innerHTML = "..."; //Placeholder for buttons (Not sure what to do here yet.)
                                    newRow.insertCell(3).innerHTML = "..."; //Placeholder for buttons (Not sure what to do here yet.)
 

                                    if (index === files.length - 1) {

                                        document.getElementById("exampleCards").hidden = true;

                                        ButtonManager.createGenerateButton(); //This in another function to avoid duplicates...
                                    }
                                };
                            })(i);

                            // Read file as data URL
                            reader.readAsDataURL(file);
                        }
                    }
                }


                function sendMultipleImageData() {
                    var imageFiles = file_Input.files;

                    if (imageFiles && imageFiles.length > 0) {
                        var imageDataArray = [];

                        //Looping through each selected file
                        for (var i = 0; i < imageFiles.length; i++) {
                            var reader = new FileReader();
                            var file = imageFiles[i];

                            reader.onload = function (e) {
                                //Convert the data URL to a Base64 string
                                var base64String = e.target.result.split(',')[1];
                                imageDataArray.push(base64String);

                                //Check if all files have been processed
                                if (imageDataArray.length === imageFiles.length) {
                                    //Create JSON data with image array
                                    var jsonData = { imageBase64Array: imageDataArray };

                                    //Send the JSON data to the backend
                                    fetch('/Image/GetMultipleImages', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify(jsonData),
                                    })
                                        .then(response => response.json())
                                        .then(data => {
                                            console.log('Success:', data);
                                            // Display the received description on your page
                                            displayDescription(data.descriptions);
                                            generateEvaluation(); //Running the evaluation

                                            ButtonManager.createUploadButton(); //Need to change this!!
                                        })
                                        .catch((error) => {
                                            console.error('Error:', error);
                                            // Display an error message on the page
                                            document.getElementById('informationOutput').innerHTML = "Error: Failed to send image data.";
                                        });
                                }
                            };

                            // Read the file as a data URL
                            reader.readAsDataURL(file);
                        }
                    } else {
                        console.error('No image data to send');
                        // Display an information message on the page
                        document.getElementById('informationOutput').innerHTML = "Please upload an image.";
                    }
                }


                //https://www.tutorialspoint.com/How-to-add-rows-to-a-table-using-JavaScript-DOM //To use InsertCell
                function displayDescription(description) {
                    console.log("Description length:", description.length);
                    //console.log("Number of rows in the table:", previewTable.rows.length);
                    for (var i = 0; i < description.length; i++) {
                        var row = previewTable.rows[i + 1]; // To skip header row (+ 1)
                        if (row) {
                            // Updating the content of the cells in the row
                            row.cells[1].innerHTML = description[i];
                        } else {
                            console.error("Row not found:", i + 1);
                        }
                    }
                }


                // Saving multiple images with descriptions and evaluations to the backend in a single request
                function saveAllImagesToGallery() {
                    var rows = previewTable.rows;

                    //Checking if files are selected
                    if (file_Input.files.length > 0) {
                        var formToSend = new FormData();

                        //Looping through each file and corresponding table row
                        for (let i = 0; i < file_Input.files.length; i++) {
                            var imageFiles = file_Input.files[i];
                            var descriptions = rows[i + 1].cells[1].innerText; 
                            var evaluationContent = rows[i + 1].cells[2].innerText;
                            var evaluations = stripHtml(evaluationContent);

                            // Log each append to check data
                            console.log(`Appending File name: ${imageFiles.name}`);
                            console.log(`Appending File: ${imageFiles}`);
                            console.log(`Appending Description: ${descriptions}`);
                            console.log(`Appending Evaluation: ${evaluations}`);

                            // Append each file with the same key
                            formToSend.append('imageFiles', imageFiles);
                            formToSend.append('descriptions', descriptions);
                            formToSend.append('evaluations', evaluations);
                        }

                        fetch('/Image/SaveImage', {
                            method: 'POST',
                            body: formToSend

                        })
                            .then(response => response.text())
                            .then(text => {
                                console.log("Response:", text);
                                return JSON.parse(text);
                            })
                            .then(data => {
                                console.log('Success:', data);
                            })
                            .catch(error => {
                                console.error('Error:', error);
                            });
                    } else {
                        console.error('No files selected or mismatch between files and table rows.');
                    }
                }



                function generateEvaluation() {
                    let tableLength = previewTable.rows.length;
                    var description = [];

                    for (var i = 0; i < tableLength; i++) {
                        var row = previewTable.rows[i + 1];
                        if (row) {
                            description.push(row.cells[1].innerHTML);
                        }
                    }

                    console.log("Reached generate evaluation with: ", description);

                    if (description.length > 0) {
                        var jsonData = { description: description };

                        fetch('/Image/GetEval', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(jsonData),
                        })
                            .then(response => response.json())

                            .then(data => {
                                console.log('Received data:', data); // Log the entire data object (SHOULD EB REMOVED.)

                                if (data && data.length > 0) {
                                    displayEvaluation(data); 

                                } else {
                                    console.log('Predictions data is null or empty');
                                }
                            })
                            .catch((error) => {
                                console.error('Error:', error);
                            });
                    } else {
                        console.error('No description data to send');
                    }
                }


                function stripHtml(html) {
                    return html.replace(/<[^>]*>/g, '');
                }

                function displayEvaluation(evaluation) {

                    // Clear existing content in the table
                    for (var i = 0; i < previewTable.rows.length; i++) {
                        var row = previewTable.rows[i];
                        if (row) {
                            // Clear the content of the cells in the row
                            row.cells[2].innerHTML = '';
                        }
                    }
                    var rowIndex = 1; 
                    var columnIndex = 2; 

                    var formattedResults = '';

                    for (var i = 0; i < evaluation.length; i++) {
                        var numericValue = parseFloat(evaluation[i]);

                        if (!isNaN(numericValue)) {
                            var formattedValue = numericValue.toFixed(4);

                            //Append the formatted value to the existing results
                            formattedResults += formattedValue + '<br>';

                            //Check if 10 metrics have been added or if it's the last metric
                            if ((i + 1) % 10 === 0 || i === evaluation.length - 1) {
                                var row = previewTable.rows[rowIndex];

                                //Checking if the row exists
                                if (row) {
                                    row.cells[columnIndex].innerHTML = formattedResults;

                                    formattedResults = '';

                                    rowIndex++;
                                } else {
                                    console.error("Row not found:", rowIndex);
                                }
                            }
                        }
                    }
                }



            });
        </script>
    }



</body>

</html>
